name: runner-cache-cross-os-toolkit

on:
  workflow_dispatch:

jobs:
  upload:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    name: runner-cache upload (${{ matrix.os }})
    steps:
    - uses: actions/checkout@v3
			with:
				repository: lazka/tookit@dont-set-msys-globally

    - name: Create file to cache
      shell: bash
      run: |
        mkdir test-cache
        echo "foo" > test-cache/test.txt
    - if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: ln -s ./test.txt test-cache/link.txt
    - name: Set Node.js 16.x
      uses: actions/setup-node@v3
      with:
        node-version: 16.x

    # In order to save & restore cache from a shell script, certain env variables need to be set that are only available in the
    # node context. This runs a local action that gets and sets the necessary env variables that are needed
    - name: Set env variables
      uses: ./packages/cache/__tests__/__fixtures__/

    # Need root node_modules because certain npm packages like jest are configured for the entire repository and it won't be possible
    # without these to just compile the cache package
    - name: Install root npm packages
      run: npm ci

    - name: Compile cache package
      run: |
        npm ci
        npm run tsc
      working-directory: packages/cache
    
    - name: Generate files in working directory
      shell: bash
      run: packages/cache/__tests__/create-cache-files.sh ${{ runner.os }} test-cache

    - name: Generate files outside working directory
      shell: bash
      run: packages/cache/__tests__/create-cache-files.sh ${{ runner.os }} ~/test-cache

    # We're using node -e to call the functions directly available in the @actions/cache package
    - name: Save cache using saveCache()
      run: |
        node -e "Promise.resolve(require('./packages/cache/lib/cache').saveCache(['test-cache','~/test-cache'],'test-${{ runner.os }}-${{ github.run_id }}'))"


  restore:
    needs: upload
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        key: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    name: runner-cache restore (${{ matrix.os }}) with key (${{ matrix.key }})
    steps:
    - uses: actions/checkout@v3
    - if: ${{ runner.os == 'Windows' }}
      shell: bash
      run: |
        #export MSYS=winsymlinks:nativestrict
        #rm "C:\Program Files\Git\usr\bin\tar.exe"
    - uses: actions/cache@main
      id: cache
      with:
        path: test-cache
        key: ${{ matrix.key }}-runner-${{ github.run_number }}-${{ github.run_attempt }}
        enableCrossOsArchive: true

    - shell: bash
      run: |
        ls test-cache/
        rm -rf test-cache
        ls
        #"C:\Program Files\Git\usr\bin\tar.exe" -tf cache.tzst -P --force-local --use-compress-program "zstd -d" # should fail
        #cat test-cache/link.txt
        

    - name: Fail if cache not found
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        echo "Cache not found, upload failed"
        exit 1
